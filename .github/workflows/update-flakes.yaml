# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: update-flakes
on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: "Dry run: if `true`, a pull request will not be made."
        type: boolean
        required: true
        default: false
  schedule:
    - cron: "0 4 * * 5"

run-name: Update flake inputs and npins

env:
  GIT_USERNAME: github-actions[bot]
  GIT_EMAIL: github-actions[bot]@users.noreply.github.com

jobs:
  update-flake:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install nix
      uses: cachix/install-nix-action@v31
    # - uses: cachix/cachix-action@v16
    #   with:
    #     name: polar-nvim
    #     authToken: '${{ secrets.CACHIX_KEY }}'
    - name: Update flake.lock
      run: nix flake update
    - id: generate-patch
      name: Generate patch
      run: |
        git config --local user.email "${{ env.GIT_EMAIL }}"
        git config --local user.name "${{ env.GIT_USERNAME }}"
        if nix run .#just "flake-update.patch"
        then
          echo "patch=true" >> "$GITHUB_OUTPUT"
        else
          echo "patch=false" >> "$GITHUB_OUTPUT"
        fi
    - uses: actions/upload-artifact@v4
      if: ${{ fromJson(steps.generate-patch.outputs.patch) }}
      with:
        name: flake-update-patch
        path: flake-update.patch

  generate-npins-matrix:
    runs-on: ubuntu-latest
    outputs:
      npins-matrix: ${{ steps.npins-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v31
      - id: npins-matrix
        name: Generate npins matrix
        run: |
          matrix=$(nix run .#just generate-npins-matrix npins/sources.json)
          printf '%s' "matrix=$matrix" >> "$GITHUB_OUTPUT"

  update-npins:
    runs-on: ubuntu-latest
    needs: [generate-npins-matrix, update-flake]
    if: ${{ needs.generate-npins-matrix.result == 'success' && needs.generate-npins-matrix.outputs.npins-matrix != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        pin: ${{ fromJson(needs.generate-npins-matrix.outputs.npins-matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v31
      - name: Update ${{ matrix.pin.name }}
        run: nix run .#npins -- -d "$(dirname ${{ matrix.pin.sources-file }})" update ${{ matrix.pin.name }}
      - name: Update tree-sitter parsers
        if: ${{ matrix.pin.name == 'nvim-treesitter' }}
        run: |
          nix run .#update-tree-sitter-grammars
      - id: generate-patch
        name: Generate patch
        run: |
          git config --local user.email "${{ env.GIT_EMAIL }}"
          git config --local user.name "${{ env.GIT_USERNAME }}"
          if nix run .#just npins-commit-and-format-patch "${{ matrix.pin.name }}.patch" ${{matrix.pin.name}} ${{matrix.pin.version}} $(nix run .#just npins-version-matrix npins/sources.json ${{ matrix.pin.name }})
          then
            echo "patch=true" >> "$GITHUB_OUTPUT"
          else
            echo "patch=false" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/upload-artifact@v4
        if: ${{ fromJson(steps.generate-patch.outputs.patch) }}
        with:
          name: ${{ matrix.pin.name }}-patch
          path: ${{ matrix.pin.name }}.patch

  create-pull-request:
    runs-on: ubuntu-latest
    needs: [update-flake, update-npins]
    if: contains(needs.*.result, 'success')
    steps:
      - uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v31
      - name: Configure git
        run: |
          git config --local user.email "${{ env.GIT_EMAIL }}"
          git config --local user.name "${{ env.GIT_USERNAME }}"
      - uses: actions/download-artifact@v4
        with:
          path: patches
      - name: Apply patches
        run: |
          shopt -s globstar
          git am ./patches/**/*.patch
      - name: Delete patch files
        run: |
          rm -rf ./patches
      - if: ${{ !inputs.dry-run }}
        uses: peter-evans/create-pull-request@v7
        with:
          title: Update flake inputs and npins
          body: ${{ github.event_name == 'workflow_dispatch' && 'Manually triggered update.' || 'Automated periodic update.' }}
          token: '${{ secrets.PAT }}'
          branch: update-flake-inputs-and-npins
